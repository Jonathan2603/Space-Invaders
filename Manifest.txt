Space Invaders Game - Manifest File


Project Overview:
This project implements a Space Invaders game in Java, applying various object-oriented design principles and patterns.
To compile files, use 'javac *.java' if directory is on 'Assignment'.
To run, use 'java Assignment.Main' and make sure directory is the folder that contains 'Assignment'.

File Structure:
1. Alien.java:
   - Implements the Factory pattern with the Alien class, created by AlienFactory.
   - Demonstrates the Factory pattern by creating different types of aliens.

2. AlienCollisionHandler.java:
   - Implements the Chain of Responsibility pattern with the AlienCollisionHandler class.
   - Demonstrates the Chain of Responsibility pattern in handling collisions involving aliens.

3. Bullet.java:
   - Represents game elements and their behavior (Element concept).
   - Demonstrates the Single Responsibility principle by encapsulating element behavior.

4. CollisionHandler.java:
   - Defines the CollisionHandler interface, used for implementing the Chain of Responsibility pattern in collision handling.
   - Demonstrates the Open-Closed Principle by allowing new collision handlers to be added without modifying existing code.

5. Game.java:
   - Represents the main game logic and functionality.
   - Manages game objects, updates game state, and handles collisions.
   - Uses the Singleton pattern with the GameManager class to ensure a single instance of the game manager.

6. GameObjectFactory.java:
   - Defines the GameObjectFactory interface, used for implementing the Factory pattern.
   - Demonstrates the Factory pattern for creating game objects.

7. Main.java:
   - Serves as the entry point for the game.
   - Contains the main method to start the game.

8. PlayerLives.java:
   - Represents the concept of player lives.
   - Contains functionality related to the player's lives.
   - Demonstrates the Single Responsibility principle.

9. PlayerSpaceship.java:
   - Represents the player's spaceship.
   - Contains behavior and attributes specific to the player's spaceship.
   - Demonstrates the Single Responsibility principle.

10. Score.java:
    - Manages the player's score.
    - Implements logic related to the player's score.
    - Demonstrates the Single Responsibility principle.

Object-Oriented Techniques Demonstrated:
- Factory pattern is used for creating game objects (AlienFactory, BulletFactory, PlayerFactory).
- Chain of Responsibility pattern is applied in collision handling (AlienCollisionHandler).
- Singleton pattern is used with the GameManager class.
- Open-Closed Principle is demonstrated in the CollisionHandler interface, allowing new handlers to be added without modifying existing code.
- Single Responsibility principle is followed in classes like Bullet, PlayerLives, and Score.

This manifest provides an overview of the project structure and the specific object-oriented techniques and principles demonstrated in various classes.
